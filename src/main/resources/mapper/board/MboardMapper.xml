<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.mgv.board.mapper.MovieBoardDao">
	<!-- 게시물 관련 -->
    <select id="getTotalRows" parameterType="map" resultType="int">
    	SELECT COUNT(*)
    	FROM MGV_MOVIE_BOARD A, MGV_MOVIE B
    	WHERE A.BOARD_DELETED = 'N' AND A.BOARD_REPORT = 'N'
    		  AND A.MOVIE_NO = B.MOVIE_NO
  	    <choose>
  			<when test="opt == 'movieTitle'">
  				and B.movie_title like  CONCAT('%', #{keyword}, '%')
  			</when>
  			<when test="opt == 'title'">
  				and A.board_name like  CONCAT('%', #{keyword}, '%')
  			</when>
  			<when test="opt == 'content'">
  				and A.board_content like  CONCAT('%', #{keyword}, '%')
  			</when>
  			<when test="opt == 'all'">
  				and (A.board_name like  CONCAT('%', #{keyword}, '%') or A.board_content like  CONCAT('%', #{keyword}, '%'))
  			</when>
  			<when test="opt == 'writer'">
  				and A.user_id like  CONCAT('%', #{keyword}, '%')
  			</when>
  		</choose>
    </select>
    
	<select id="getMBoards" parameterType="map" resultType="kr.co.mgv.board.vo.MovieBoard">
	    select *
	    from (
	        select 
	            A.board_no              as no,
	            A.board_name            as name,
	            A.board_create_date     as createDate,
	            A.board_update_date     as updateDate,
	            A.board_read_cnt        as readCount,
	            A.board_comment_cnt     as commentCount,
	            A.user_id               as "user.id",
	            A.board_content         as content,
	            row_number() over (
	            <choose>
	                <!-- sort 파라미터가 없을 경우 -->
	                <when test="sort == null">
	                    order by board_create_date desc
	                </when>
	                <!-- sort 파라미터가 있을 경우 -->
	                <otherwise>
	                    <choose>
	                        <when test="sort == 'new'">
	                            order by board_create_date desc
	                        </when>
	                        <when test="sort == 'old'">
	                            order by board_create_date asc
	                        </when>
	                        <when test="sort == 'view'">
	                            order by board_read_cnt desc, board_create_date desc
	                        </when>
	                        <when test="sort == 'comment'">
	                            order by board_comment_cnt desc, board_create_date desc
	                        </when>
	                        <!-- 기본 정렬 -->
	                        <otherwise>
	                            order by board_create_date desc
	                        </otherwise>
	                    </choose>
	                </otherwise>
	            </choose>
	        ) as ROWNUMBER
	        from
	            MGV_MOVIE_BOARD A, MGV_MOVIE B
	        where board_deleted = 'N' and board_report = 'N'
	              and A.movie_no = B.movie_no
	        <choose>
	            <when test="opt == 'movieTitle'">
	                and B.movie_title like CONCAT('%', #{keyword}, '%')
	            </when>
	            <when test="opt == 'title'">
	                and board_name like  CONCAT('%', #{keyword}, '%')
	            </when>
	            <when test="opt == 'content'">
	                and board_content like  CONCAT('%', #{keyword}, '%')
	            </when>
    			<when test="opt == 'all'">
    				and (board_name like CONCAT('%', #{keyword}, '%') or board_content like CONCAT('%', #{keyword}, '%'))
    			</when>
	            <when test="opt == 'writer'">
	                and user_id like  CONCAT('%', #{keyword}, '%')
	            </when>
	        </choose>
	    ) A
	    having A.ROWNUMBER between #{begin} and #{end}
	</select>
	
	<!-- 상세페이지 관련 -->
	<select id="getMBoardByNo" parameterType="int" resultType="kr.co.mgv.board.vo.MovieBoard">
		select
            A.board_no              as no,
            A.board_name            as name,
            A.board_content         as content,
            A.board_create_date     as createDate,
            A.board_update_date     as updateDate,
            A.board_read_cnt        as readCount,
            A.report_count			as reportCount,
            A.board_comment_cnt     as commentCount,
            A.user_id               as "user.id",
            A.movie_no				as "movie.no",
            B.movie_title			as "movie.title",
            A.BORAD_FILENAME		as fileName,
			A.board_like_count		as likeCount,
			C.user_profile_img		as "user.profileImg"
	    from
	        MGV_MOVIE_BOARD A, MGV_MOVIE B, MGV_USER C
	    where 
	    	A.movie_no = B.movie_no
	    	and A.user_id = C.user_id
	    	and A.board_no = #{value}
	</select>
	
	<update id="updateMBoardByNo" parameterType="kr.co.mgv.board.vo.MovieBoard">
		update MGV_MOVIE_BOARD
			<set>
				<if test="name != null">
					board_name = #{name},
				</if>
				<if test="content != null">
					board_content = #{content},
				</if>
				<if test="updateDate != null">
					board_update_date = CURRENT_TIMESTAMP,
				</if>
				<if test="readCount != null">
					board_read_cnt = #{readCount},
				</if>
				<if test="commentCount != null">
					board_comment_cnt = #{commentCount},
				</if>
				<if test="deleted != null">
					board_deleted = #{deleted},
				</if>
				<if test="report != null">
					board_report = #{report},
				</if>
				<if test="fileName != null">
					BORAD_FILENAME = #{fileName},
				</if>
				<if test="reportCount != null">
					report_count = #{reportCount},
				</if>
				<if test="likeCount != null">
					board_like_count = #{likeCount},
				</if>
				<if test="movie != null">
					movie_no = #{movie.no},
				</if>
			</set>
			where board_no = #{no}
	</update>

	 <insert id="insertMBoardLike" parameterType="kr.co.mgv.board.vo.MBoardLike">
	 	INSERT INTO jhta_2302.MOVIE_BOARD_LIKE
		(USER_ID, BOARD_NO)
		VALUES(#{user.id}, #{board.no});
	 </insert>
	 
	 <select id="getLikeByBnoAndId" parameterType="kr.co.mgv.board.vo.MBoardLike" resultType="kr.co.mgv.board.vo.MBoardLike">
	 	SELECT 
	 		LIKE_NO		as no, 
	 		LIKE_CANCEL as cancel,
	 		USER_ID		as "user.id", 
	 		BOARD_NO	as "board.no"
		FROM 
			MOVIE_BOARD_LIKE
		where
			user_id = #{user.id}
			and board_no = #{board.no}
	 	
	 </select>
	 
	 <update id="updateLike" parameterType="kr.co.mgv.board.vo.MBoardLike">
	 	UPDATE 
	 		MOVIE_BOARD_LIKE
		SET 
			like_cancel = #{cancel}
		WHERE user_id = #{user.id}
			  and board_no = #{board.no}
	 	
	 </update>
	
	
	<!-- 댓글 관련  -->
	<insert id="insertMBoardComment" parameterType="kr.co.mgv.board.vo.MBoardComment">
		INSERT INTO jhta_2302.MGV_MBOARD_COMMENT
		(COMMENT_CONTENT, USER_ID, BOARD_NO, PARENT_COMMENT_NO, GREAT_COMMENT_NO)
		VALUES(#{content}, #{user.id}, #{board.no}, #{parent.no}, #{great.no});
	</insert>
	
	<select id="getMBoardComments" resultType="kr.co.mgv.board.vo.MBoardComment" parameterType="int">
		SELECT 
			A.COMMENT_NO				as no, 
			A.COMMENT_CREATE_dATE		as createDate, 
			A.COMMENT_UPDATE_DATE		as updateDate, 
			A.COMMENT_CONTENT			as content, 
			A.USER_ID					as "user.id", 
			A.COMMENT_DELETED			as deleted, 
			A.BOARD_NO					as "board.no",
			B.user_profile_img			as "user.profileImg"
		FROM 
			MGV_MBOARD_COMMENT A, MGV_USER B
		WHERE 
			comment_deleted = 'N'
			and A.user_id = B.user_id
			and board_no = #{value}
			and great_comment_no is null
		order by comment_create_date;
	</select>
	
	<select id="getMBoardChildComments" resultType="kr.co.mgv.board.vo.MBoardComment" parameterType="int">
		SELECT 
			A.COMMENT_NO				as no, 
			A.COMMENT_CREATE_dATE		as createDate, 
			A.COMMENT_UPDATE_DATE		as updateDate, 
			A.COMMENT_CONTENT			as content, 
			A.USER_ID					as "user.id", 
			A.COMMENT_DELETED			as deleted, 
			A.BOARD_NO					as "board.no", 
			A.PARENT_COMMENT_NO			as "parent.no", 
			A.GREAT_COMMENT_NO			as "great.no",
			P.USER_ID					as "parent.user.id",
			G.USER_ID					as "great.user.id",
			B.user_profile_img			as "user.profileImg"
		FROM 
			MGV_MBOARD_COMMENT A, MGV_MBOARD_COMMENT P, MGV_MBOARD_COMMENT G, MGV_USER B
		WHERE 
			A.parent_comment_no = P.comment_no
			and A.user_id = B.user_id
			and A.great_comment_no = G.comment_no
			and A.comment_deleted = 'N'
			and A.board_no = #{value}
			and A.great_comment_no is NOT null
		order by A.comment_create_date;
	</select>
	
	<select id="getGreatComment" resultType="kr.co.mgv.board.vo.MBoardComment" parameterType="kr.co.mgv.board.vo.MBoardComment">
		SELECT 
			COMMENT_NO				as no, 
			COMMENT_CREATE_dATE		as createDate, 
			COMMENT_UPDATE_DATE		as updateDate, 
			COMMENT_CONTENT			as content, 
			USER_ID					as "user.id", 
			COMMENT_DELETED			as deleted, 
			BOARD_NO				as "board.no"
		FROM 
			MGV_MBOARD_COMMENT 
		WHERE 
			comment_deleted = 'N'
			and board_no = #{board.no}
			and user_id = #{user.id}
			and great_comment_no is null
			ORDER BY comment_create_date DESC
			LIMIT 1;
	</select>
	
	<select id="getTotalCommentCount" parameterType="int" resultType="int">
		select count(*)
		from MGV_MBOARD_COMMENT
		where great_comment_no = #{value}
	</select>
	
	<select id="getChildComment" resultType="kr.co.mgv.board.vo.MBoardComment" parameterType="kr.co.mgv.board.vo.MBoardComment">
		SELECT 
			A.COMMENT_NO				as no, 
			A.COMMENT_CREATE_dATE		as createDate, 
			A.COMMENT_UPDATE_DATE		as updateDate, 
			A.COMMENT_CONTENT			as content, 
			A.USER_ID					as "user.id", 
			A.COMMENT_DELETED			as deleted, 
			A.BOARD_NO					as "board.no", 
			A.PARENT_COMMENT_NO			as "parent.no", 
			A.GREAT_COMMENT_NO			as "great.no",
			P.USER_ID					as "parent.user.id",
			G.USER_ID					as "great.user.id"
		FROM 
			MGV_MBOARD_COMMENT A, MGV_MBOARD_COMMENT P, MGV_MBOARD_COMMENT G
		WHERE 
			A.parent_comment_no = P.comment_no
			and A.great_comment_no = G.comment_no
			and A.comment_deleted = 'N'
			and A.board_no = #{board.no}
			and A.user_id = #{user.id} 
			and A.great_comment_no is NOT null
		ORDER BY A.comment_create_date DESC
		LIMIT 1;
	</select>
	
	<delete id="deleteGreatComment" parameterType="int">
		DELETE FROM MGV_MBOARD_COMMENT
		WHERE COMMENT_NO= #{value};
	</delete>
	
	<delete id="deleteChildsComment" parameterType="int">
		DELETE FROM MGV_MBOARD_COMMENT
		WHERE GREAT_COMMENT_NO= #{value};
	</delete>
	
	<select id="getReCommentByGreatNo" parameterType="int" resultType="kr.co.mgv.board.vo.MBoardComment">
		SELECT 
			A.COMMENT_NO				as no, 
			A.COMMENT_CREATE_dATE		as createDate, 
			A.COMMENT_UPDATE_DATE		as updateDate, 
			A.COMMENT_CONTENT			as content, 
			A.USER_ID					as "user.id", 
			A.COMMENT_DELETED			as deleted, 
			A.BOARD_NO					as "board.no", 
			A.PARENT_COMMENT_NO			as "parent.no", 
			A.GREAT_COMMENT_NO			as "great.no",
			P.USER_ID					as "parent.user.id",
			G.USER_ID					as "great.user.id"
		FROM 
			MGV_MBOARD_COMMENT A, MGV_MBOARD_COMMENT P, MGV_MBOARD_COMMENT G
		WHERE 
			A.parent_comment_no = P.comment_no
			and A.great_comment_no = G.comment_no
			A.great_comment_no = #{value}
	</select>
	
	<!-- 게시물 등록 관련 -->
	<select id="getMovieTitle" resultType="kr.co.mgv.movie.vo.Movie">
		select movie_no		as no,
			   movie_title	as title
		from MGV_MOVIE
		order by movie_title asc
	</select>
	
	<insert id="insertMBoard" parameterType="kr.co.mgv.board.vo.MovieBoard">
		INSERT INTO 
			MGV_MOVIE_BOARD
		(BOARD_NAME, BOARD_CONTENT, user_id, MOVIE_NO, BORAD_FILENAME)
		VALUES
		(#{name}, #{content}, #{user.id}, #{movie.no}, #{fileName});
		
	</insert>
	
	<!-- 신고 관련 -->
	<select id="getReportReason" resultType="kr.co.mgv.board.vo.ReportReason">
		SELECT REASON_NO as no, REASON_NAME as name
		FROM MGV_REPORT_REASON;
	</select>
	
	<insert id="insertMboardReport" parameterType="kr.co.mgv.board.vo.MboardReport">
		INSERT MGV_MBOARD_REPORT
		(REPORT_REASON, REASON_NO, BOARD_NO, USER_ID)
		VALUES(#{reasonContent}, #{reason.no}, #{board.no}, #{user.id});
	</insert>
	
	<select id="getMboardReportById" parameterType="String" resultType="kr.co.mgv.board.vo.MboardReport">
		SELECT 
			report_NO as no, 
			REPORT_REASON as reasonContent, 
			REASON_NO as "reason.no", 
			BOARD_NO as "board.no", 
			USER_ID as "user.id"
		FROM MGV_MBOARD_REPORT A
		where user_id = #{value};
	</select>
</mapper>