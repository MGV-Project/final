<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.mgv.board.mapper.PartyBoardDao">
	<!-- 등록폼 관련  -->
	<select id="getSceduleByDateAndTNoAndMNo" parameterType="map" resultType="kr.co.mgv.board.vo.PartyBoardSchedule">
		select 
			A.schedule_id			as id,
			A.schedule_date			as date,
			A.SCHEDULE_START_TIME	as start,
			A.SCHEDULE_END_TIME		as end,
			A.REMAINING_SEATS		as remainingSeats,
			A.SCREEN_SEATS			as seats,
			A.movie_no				as "movie.no",
			C.movie_title			as "movie.title",
			B.theater_no			as "theater.no",
			D.theater_name			as "theater.name",
			A.screen_id				as "screen.id",
			B.screen_name			as "screen.name"
		from 
			MGV_SCHEDULE A, MGV_THEATER_SCREEN B, MGV_MOVIE C, MGV_THEATERS D
		where 
			A.screen_id = B.screen_id
			and B.theater_no = D.theater_no
		    and A.movie_no = C.movie_no
		    and A.movie_no = #{movieNo}
		    and A.schedule_date = #{date}
		    and B.theater_no = #{theaterNo}
		    AND TIMESTAMPDIFF(HOUR, NOW(), CONCAT(A.schedule_date, ' ', STR_TO_DATE(A.SCHEDULE_START_TIME, '%H:%i'))) >= 1
	</select>
	<select id="getSceduleById" parameterType="int" resultType="kr.co.mgv.board.vo.PartyBoardSchedule">
		select 
			A.schedule_id			as id,
			A.schedule_date			as date,
			A.SCHEDULE_START_TIME	as start,
			A.SCHEDULE_END_TIME		as end,
			A.REMAINING_SEATS		as remainingSeats,
			A.SCREEN_SEATS			as seats,
			A.movie_no				as "movie.no",
			C.movie_title			as "movie.title",
			B.theater_no			as "theater.no",
			D.theater_name			as "theater.name",
			A.screen_id				as "screen.id",
			B.screen_name			as "screen.name"
		from 
			MGV_SCHEDULE A, MGV_THEATER_SCREEN B, MGV_MOVIE C, MGV_THEATERS D
		where 
			A.screen_id = B.screen_id
			and B.theater_no = D.theater_no
		    and A.movie_no = C.movie_no
		    and A.schedule_id = #{scheduleId}
	</select>
	
	<!-- CRUD -->
	<insert id="insertPboard" parameterType="kr.co.mgv.board.vo.PartyBoard">
		INSERT INTO PARTY_BOARD
		(PARTY_HEADCOUNT, USER_ID,  PARTY_GENDER, SCHEDULE_ID, BOARD_CONTENT, BOARD_NAME)
		VALUES(#{headCount}, #{user.id}, #{gender}, #{schedule.id}, #{content}, #{name});
	</insert>
	
	
	<!-- 목록 -->
	<select id="getPartyBoards" resultType="kr.co.mgv.board.vo.PartyBoard">
		select
			A.party_no				as no,
			A.party_headcount		as headCount,
			A.user_id				as "user.id",
			A.PARTY_CREATE_DATE		as createDate,
			A.PARTY_update_DATE		as updateDate,
			A.party_gender			as gender,
			A.board_name			as name,
			A.board_comment_count	as commentCount,
			A.board_read_count		as readCount,
			A.PARTY_COMPLETE		as complete,
			B.schedule_id			as "schedule.id",
			B.schedule_date			as "schedule.date",
			B.SCHEDULE_START_TIME	as "schedule.start",
			B.SCHEDULE_END_TIME		as "schedule.end",
			B.REMAINING_SEATS		as "schedule.remainingSeats",
			B.SCREEN_SEATS			as "schedule.seats",
			B.movie_no				as "schedule.movie.no",
			D.movie_title			as "schedule.movie.title",
			C.theater_no			as "schedule.theater.no",
			E.theater_name			as "schedule.theater.name",
			B.screen_id				as "schedule.screen.id",
			C.screen_name			as "schedule.screen.name"
		from 
			PARTY_BOARD A, MGV_SCHEDULE B, MGV_THEATER_SCREEN C, MGV_MOVIE D, MGV_THEATERS E
		where 
			A.schedule_id = B.schedule_id
			and B.screen_id = C.screen_id
			and C.theater_no = E.theater_no
		    and B.movie_no = D.movie_no
		    and A.PARTY_DELETED = 'N'
		    and A.BOARD_REPORT = 'N'
		    and A.
	</select>
</mapper>